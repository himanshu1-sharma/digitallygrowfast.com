import React, { useState, useEffect } from "react";
import styles from "@/styles/OnlineGrowthRevolution.module.css";
import video from "@/styles/HeaderVideo.module.css";
import Link from "next/link";
import Image from "next/image";
import Head from "next/head";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faGlobe, faCheck, faClose } from "@fortawesome/free-solid-svg-icons";
import {
  faYoutube,
  faFacebookF,
  faInstagram,
  faLinkedinIn,
  faWhatsapp,
} from "@fortawesome/free-brands-svg-icons";
import Form from "react-bootstrap/Form";
import { BASEURL } from "@/configs/constants";
import axios from "axios";
import moment from "moment";
import ProgramFor, { WhyChooseUs, ClientSlider } from "@/api/ProgramFor";
import OfferList, { ProcessList } from "@/api/OfferContent";
import Masonry, { ResponsiveMasonry } from "react-responsive-masonry";
import Footer from "@/components/Footer/Footer";
import Accordion from "react-bootstrap/Accordion";
import faq from "@/api/Faq.js";
import Modal from "react-bootstrap/Modal";
import CategoryList from "@/api/CategoryApi";
import CountryListApi from "@/api/CountryApi";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useRouter } from "next/router";
import Spinner from "react-bootstrap/Spinner";
import { VerticalTimeline, VerticalTimelineElement } from 'react-vertical-timeline-component';
import 'react-vertical-timeline-component/style.min.css';
import MobileNavigatin from "@/components/Navigation/MobileNavigation";
import Navigation from "@/components/Navigation/Navigation";


export default function OnlineGrowthRevolution() {
  const [clientCard, setClientCard] = useState();
  const [comments, setComments] = useState();
  const [programData] = useState(ProgramFor);
  const [chooseUsData] = useState(WhyChooseUs);
  const [clientSliderData] = useState(ClientSlider);
  const [offerListData] = useState(OfferList);
  const [processListData] = useState(ProcessList);
  const [faqData] = useState(faq);
  const [modalShow, setModalShow] = useState(false);
  const [render, setrender] = useState(false);
  const router = useRouter();
  const page = router.query.page;
  const [enquiryData, setEnquiryData] = useState();

  const fetchClientCard = async () => {
    await axios.get(`${BASEURL}api/dgf/revolution-client/get`).then((data) => {
      const limitedData = data.data.data.slice(0, 5);
      setClientCard(limitedData);
    });
  };

  const fetchComments = async () => {
    await axios
      .get(`${BASEURL}api/dgf/revolution-client-comments/get`)
      .then((data) => {
        const limitedComment = data.data.data.slice(0, 15);
        setComments(limitedComment);
      });
  };

  const fectEnquiryData = async () => {
    await axios
      .get(`${BASEURL}api/dgf/revolution-client-enquiry/get`)
      .then((data) => {
        setEnquiryData(data.data.data);
      });
  };

  useEffect(() => {
    fetchClientCard();
    fetchComments();
    setrender(false);
    fectEnquiryData();
  }, [render]);

  return (
    <>
      <Head>
        <title>Online Growth Revolution</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <MyVerticallyCenteredModal
        show={modalShow}
        onHide={() => setModalShow(false)}
        setrender={setrender}
        CountryListApi={CountryListApi}
        router={router}
        page={page}
      />
      <ToastContainer />



      <MobileNavigatin />
      <Navigation />
      {/* =======header============= */}
      <section className="container-fluid p-0">
        <div className={styles.headerBg}>

          <div className="container">
            <div className="row d-flex justify-content-center">
              <div className="col-xl-8 col-lg-8 col-md-12 col-sm-12 col-12">
                <div className={styles.headerContent}>
                  <div className={video.headerVideo}>
                    <iframe src="https://www.youtube.com/embed/-UX5mACt6l4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen />
                  </div>
                  <h2 className={styles.gradientText}># Mission 999</h2>
                  <div className={styles.numberBg}>
                    <div className={styles.numberBox}>
                      {enquiryData?.length}/999
                    </div>
                  </div>
                  <p>Lorem ipsum is placeholder text commonly used in the graphic, print, and publishing industries for previewing layouts. used in the graphic, print, and publishing industries for previewing layouts.</p>
                  <div
                    className={styles.grabButton}
                    onClick={() => setModalShow(true)}
                  >
                    Grab this opportunity now at ₹999/-
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
      {/* ===========end============== */}

      {/* ==========client============= */}

      <section className="container-fluid p-0">
        <div className={styles.clientBg}>
          <div className="container">
            <div className="row d-flex justify-content-center">
              <div className="col-xl-9 col-lg-9 col-md-12 col-sm-12 col-12">
                <div className={styles.title}>
                  <h2 className={styles.gradientText}>Revolutionary package</h2>
                  <p>What will you get inside this package?</p>
                </div>
              </div>
            </div>
            <div className="row d-flex justify-content-center">
              {offerListData &&
                offerListData?.map((curElt, index) => {
                  return (
                    <>
                      <div className="col-xl-9 col-lg-9 col-md-12 col-sm-12 col-12">
                        <div className={styles.offerCard} key={index}>
                          <div className={styles.offerCardShadow}></div>
                          <div className={styles.offerNumber}>#{index + 1}</div>
                          <div className={styles.offerTitle}>
                            <h4>{curElt?.title}</h4>
                            <div className={styles.offerCardPrice}>
                              {curElt.price === "priceless" ? <span>Priceless </span> :
                                <>
                                  <span>Market worth </span> ₹{curElt.price}/-
                                </>
                              }
                            </div>
                          </div>
                          <div className={styles.offerList}>
                            <ul>
                              {curElt.points?.map((point) => {
                                return (
                                  <>
                                    <li>{point}</li>
                                  </>
                                );
                              })}
                            </ul>
                            {curElt?.note && <small>{curElt?.note}</small>}
                          </div>
                        </div>
                      </div>
                    </>
                  );
                })}
            </div>
            <div className="row">
              <div className="col-lg-12">
                <div className={styles.totalValue}>
                  <h4>Total Value You Get</h4>
                  <div className={styles.cutPrice}>₹17,499</div>
                  <div
                    className={styles.grabButton}
                    onClick={() => setModalShow(true)}
                  >
                    Grab this opportunity now at ₹999/-
                  </div>
                </div>
              </div>
            </div>
            {/* <div className="row d-flex justify-content-center">
              <div className="col-xl-9 col-lg-9 col-md-12 col-sm-12 col-12">
                <div className="row d-flex justify-content-center">
                  <div className="col-xl-4 col-lg-4 col-md-6 col-sm-12 col-12">
                    <div className={styles.clientCard}>
                      <div className={styles.nextYou}>Next You</div>
                    </div>
                  </div>
                  {clientCard &&
                    clientCard?.map((curElt, index) => {
                      return (
                        <>
                          <div className="col-xl-4 col-lg-4 col-md-6 col-sm-12 col-12">
                            <div className={styles.clientCard} key={index}>
                              <div className={styles.clientCardContent}>
                                <div className={styles.cardTime}>
                                  {moment(curElt.created_ts)
                                    .startOf("minut")
                                    .fromNow()}
                                </div>
                                <div
                                  className={styles.clientCardImg}
                                  style={{
                                    backgroundImage: `url('${curElt?.profile}')`,
                                  }}
                                ></div>
                                <div className={styles.clientCardInfo}>
                                  {curElt?.name && <h4>{curElt?.name}</h4>}
                                  {curElt?.companyName && (
                                    <p>{curElt?.companyName}</p>
                                  )}
                                  <ul>
                                    {curElt?.website && (
                                      <li>
                                        <a
                                          href={curElt?.webiste}
                                          target="_blank"
                                        >
                                          <FontAwesomeIcon icon={faGlobe} />
                                        </a>
                                      </li>
                                    )}
                                    {curElt?.facebook && (
                                      <li>
                                        <a
                                          href={curElt?.facebook}
                                          target="_blank"
                                        >
                                          <FontAwesomeIcon icon={faFacebookF} />
                                        </a>
                                      </li>
                                    )}

                                    {curElt?.instagram && (
                                      <li>
                                        <a
                                          href={curElt?.instagram}
                                          target="_blank"
                                        >
                                          <FontAwesomeIcon icon={faInstagram} />
                                        </a>
                                      </li>
                                    )}
                                  </ul>
                                  <div className={styles.clientCardLogo}>
                                    <div
                                      className={styles.clientLogo}
                                      style={{
                                        backgroundImage: `url('${curElt?.logo}')`,
                                      }}
                                    ></div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </>
                      );
                    })}
                </div>
              </div>
            </div>
            <div className="row d-flex justify-content-center">
              <div className="col-xl-9 col-lg-9 col-md-12 col-sm-12 col-12">
                <div className={styles.viewAll}>
                  <Link href="">View all</Link>
                </div>
                <div className="mt-5">
                  <div
                    className={styles.grabButton}
                    onClick={() => setModalShow(true)}
                  >
                    Grab this opportunity now at ₹999/-
                  </div>
                </div>
              </div>
            </div> */}
          </div>

        </div>
      </section>

      {/* ==========end================= */}

      {/* ======Who is this program for?========== */}

      <section className="container-fluid p-0">
        <div className={styles.programForBg}>
          <div className="container">
            <div className="row d-flex justify-content-center">
              <div className="col-xl-9 col-lg-9 col-md-12 col-sm-12 col-12">
                <div className={styles.title}>
                  <h2 className={styles.gradientText}>Why choose us</h2>
                </div>
              </div>
            </div>
            <div className="row">
              <div className="col-xl-12">
                <div className={styles.whyChooseBox}>
                  <div className="whyChoose">
                    <VerticalTimeline>
                      {chooseUsData && chooseUsData.map((curElt, index) => {
                        return (
                          <>
                            <VerticalTimelineElement
                              className="vertical-timeline-element--work"
                            >
                              <div className={styles.shadowEffect}></div>
                              <div className={styles.whyChooseCard}>
                                <div className={styles.whyChooseIcon}>
                                  <div className={styles.icon}>

                                  </div>
                                </div>
                                <div className={styles.whyChooseContent}>
                                  <h4>{curElt.title}</h4>
                                  <p>{curElt.desc}</p>
                                </div>
                              </div>
                            </VerticalTimelineElement>
                          </>
                        )
                      })}
                    </VerticalTimeline>


                  </div>
                </div>
              </div>
            </div>
            {/*  */}
            <div className="row d-flex justify-content-center">
              <div className="col-xl-9 col-lg-9 col-md-12 col-sm-12 col-12">
                <div className="mt-5 mb-5">
                  <div
                    className={styles.grabButton}
                    onClick={() => setModalShow(true)}
                  >
                    Grab this opportunity now at ₹999/-
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className="container">
            <div className="row d-flex justify-content-center">
              <div className="col-xl-9 col-lg-9 col-md-12 col-sm-12 col-12">
                <div className={styles.smalltitle}>
                  <h2>PROCESS YOU NEED TO FOLLOW </h2>
                </div>
              </div>
            </div>
            <div className="row d-flex justify-content-center">
              <div className="col-xl-9 col-lg-9 col-md-12 col-sm-12 col-12">
                <div className="row d-flex justify-content-center">
                  {processListData &&
                    processListData.map((curElt, index) => {
                      return (
                        <>
                          <div className="col-xl-4 col-lg-4 col-md-6 col-sm-12 col-12">
                            <div className={styles.processCard} key={index}>
                              <div className={styles.programForIcon}>
                                <div className={styles.programForIconBox}>
                                  <FontAwesomeIcon icon={faCheck} />
                                </div>
                              </div>
                              <div className={`${styles.programForContent} ${styles.stepsCard}`}>
                                <h4>Step {index + 1}</h4>
                                <p>{curElt.name}</p>
                              </div>
                            </div>
                          </div>
                        </>
                      );
                    })}
                </div>
              </div>
            </div>
            <div className="row d-flex justify-content-center">
              <div className="col-xl-9 col-lg-9 col-md-12 col-sm-12 col-12">
                <div className="mt-5 mb-5">
                  <div
                    className={styles.grabButton}
                    onClick={() => setModalShow(true)}
                  >
                    Grab this opportunity now at ₹999/-
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className="container">
            <div className="row d-flex justify-content-center">
              <div className="col-xl-9 col-lg-9 col-md-12 col-sm-12 col-12">
                <div className={styles.smalltitle}>
                  <h2>Business/individuals who have purchased this package</h2>
                </div>
              </div>
            </div>
            <div className="row">
              <div className="col-lg-12">
                <div className={styles.numberBg}>
                  <div className={styles.numberBox}>
                    {enquiryData?.length}/999
                  </div>
                </div>
              </div>
            </div>
            <div className="row d-flex justify-content-center">
              <div className="col-lg-9">
                <div className={styles.clientSlider}>
                  <ul>
                    {clientSliderData && clientSliderData.map((curElt, index) => {
                      return (
                        <>
                          <li key={index}>
                            <div className={styles.clientSliderCard}>
                              <Image src={`/client/${curElt.img}.png`} alt={curElt.name} width={164} height={164} className="img-fluid" />
                              <p>{curElt.name}</p>
                            </div>
                          </li>
                        </>
                      )
                    })}

                  </ul>
                </div>
              </div>
            </div>
            <div className="row d-flex justify-content-center">
              <div className="col-xl-9 col-lg-9 col-md-12 col-sm-12 col-12">
                <div className={styles.smalltitle}>
                  <h2>Time is running out</h2>
                </div>
                <div className="mb-5">
                  <div
                    className={styles.grabButton}
                    onClick={() => setModalShow(true)}
                  >
                    Grab this opportunity now at ₹999/-
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className="container">
            <div className="row d-flex justify-content-center">
              <div className="col-xl-9 col-lg-9 col-md-12 col-sm-12 col-12">
                <div className={styles.title}>
                  <h2 className={styles.gradientText}>Who is this for?</h2>
                  <p>Still you are in doubt let’s have a look</p>
                </div>
              </div>
            </div>
            <div className="row d-flex justify-content-center">
              <div className="col-xl-9 col-lg-9 col-md-12 col-sm-12 col-12">
                <div className="row d-flex justify-content-center">
                  {programData &&
                    programData.map((curElt, index) => {
                      return (
                        <>
                          <div className="col-xl-6 col-lg-6 col-md-6 col-sm-12 col-12">
                            <div className={styles.programForCard} key={index}>
                              <div className={styles.programForIcon}>
                                <div className={styles.programForIconBox}>
                                  <FontAwesomeIcon icon={faCheck} />
                                </div>
                              </div>
                              <div className={styles.programForContent}>
                                <h4>{curElt.title}</h4>
                              </div>
                            </div>
                          </div>
                        </>
                      );
                    })}
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* ========end============ */}

      {/* ======Frequently Asked Questions========== */}

      <section className="container-fluid p-0">
        <div className={styles.commentsBg}>
          <div className="container">
            <div className="row d-flex justify-content-center">
              <div className="col-xl-9 col-lg-9 col-md-12 col-sm-12 col-12">
                <div className={styles.title}>
                  <h2 className={styles.gradientText}>Answers of your
                    questions</h2>
                </div>
              </div>
            </div>
            <div className="row d-flex justify-content-center">
              <div className="col-xl-9 col-lg-9 col-md-12 col-sm-12 col-12">
                <div className={styles.faqAccordionBg}>
                  <div className={styles.faqAccordion}>
                    <div className="faqAccordion ogr">
                      <Accordion>
                        {faqData.map((curElt, index) => {
                          return (
                            <>
                              <Accordion.Item eventKey={index}>
                                <Accordion.Header>
                                  <div className="plus">
                                    <div className="top"></div>
                                    <div className="bottom"></div>
                                  </div>
                                  {curElt.question}
                                </Accordion.Header>
                                <Accordion.Body>{curElt.answer}</Accordion.Body>
                              </Accordion.Item>
                            </>
                          );
                        })}
                      </Accordion>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* ========end============ */}

      {/* ======What will You Get inside this offer?========== */}

      {/* <section className="container-fluid p-0 mt-5">
        <div className={styles.offerBg}>
          <div className="container">
            <div className="row d-flex justify-content-center">
              <div className="col-xl-9 col-lg-9 col-md-12 col-sm-12 col-12">
                <div className={styles.title}>
                  <h2>What will You Get inside this offer?</h2>
                </div>
              </div>
            </div>

            <div className="row d-flex justify-content-center">
              <div className="col-xl-9 col-lg-9 col-md-12 col-sm-12 col-12">
                <div className="mb-5">
                  <div
                    className={styles.grabButton}
                    onClick={() => setModalShow(true)}
                  >
                    Grab this opportunity now at ₹999/-
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section> */}

      {/* ========end============ */}

      {/* ======PROCESS YOU NEED TO FOLLOW ========== */}

      {/* <section className="container-fluid p-0 mt-5">
        <div className={styles.programForBg}>

        </div>
      </section> */}

      {/* ========end============ */}

      {/* ===============Here’s what previous mentees say about the program============== */}
      {/* <section className="container-fluid p-0 mt-5">
        <div className={styles.commentsBg}>
          <div className="container">
            <div className="row d-flex justify-content-center">
              <div className="col-xl-9 col-lg-9 col-md-12 col-sm-12 col-12">
                <div className={styles.title}>
                  <h2>Here’s what previous mentees say about the program</h2>
                </div>
              </div>
            </div>
            <div className="row d-flex justify-content-center">
              <div className="col-xl-9 col-lg-9 col-md-12 col-sm-12 col-12">
                <div className="row d-flex justify-content-center">
                  <ResponsiveMasonry
                    columnsCountBreakPoints={{ 350: 1, 750: 2, 900: 2, 1024: 2, 1200: 3 }}
                  >
                    <Masonry gutter="20px">
                      {comments &&
                        comments?.map((curElt, index) => {
                          return (
                            <>
                              <div className={styles.commentCard}>
                                <div className={styles.commentCardProfile}>
                                  <div className={styles.profilePic}>
                                    <div
                                      className={styles.profile}
                                      style={{
                                        backgroundImage: `url('https://images.pexels.com/photos/2379004/pexels-photo-2379004.jpeg?auto=compress&cs=tinysrgb&w=1600')`,
                                      }}
                                    ></div>
                                  </div>
                                  <div className={styles.profileContent}>
                                    <h4>Himanshu Sharma</h4>
                                    <span>Full Stack Developer</span>
                                  </div>
                                </div>
                                <div className={styles.comment}>
                                  <p>{curElt?.comment}</p>
                                </div>
                              </div>
                            </>
                          );
                        })}
                    </Masonry>
                  </ResponsiveMasonry>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section> */}

      {/* ================end=============== */}



      <Footer />
    </>
  );
}

function MyVerticallyCenteredModal(props) {
  const [location, setLocation] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [category] = useState(CategoryList);
  const [countryList] = useState(props.CountryListApi);

  const [input, setInput] = useState({});
  const [country, setCountry] = useState("India");
  const [categoryName, setCategoryName] = useState("");
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [number, setNumber] = useState("");
  const [address, setAddress] = useState("");
  const [errors, setErrors] = useState({});

  useEffect(() => {
    navigator.geolocation.getCurrentPosition((pos) => {
      const { latitude, longitude } = pos.coords;
      console.log(latitude, longitude);
      const url = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`;
      fetch(url)
        .then((res) => res.json())
        .then((data) => setLocation(data.address));
    });
  }, []);

  const handleChange = (e) => {
    const name = e.target.name;
    const value = e.target.value;

    setInput({ ...input, [name]: value });
  };

  const handleSubmit = async (e) => {
    try {
      e.preventDefault();
      const validationErrors = {};

      if (!email) {
        validationErrors.email = "Email is required";
      }

      if (!name) {
        validationErrors.name = "Name is required";
      }

      if (!number) {
        validationErrors.number = "Contact/WhatsApp number is required";
      }

      if (!address) {
        validationErrors.address = "Address is required";
      }

      if (!country) {
        validationErrors.country = "Country is required";
      }

      if (!categoryName) {
        validationErrors.categoryName = "Please select Industry";
      }

      setErrors(validationErrors);

      if (Object.keys(validationErrors).length === 0) {
        await axios
          .post(`${BASEURL}api/dgf/revolution-client-enquiry/add`, {
            category: categoryName,
            name: name,
            businessName: input.businessName,
            gst: input.gst,
            number: number,
            email: email,
            country: country,
            address: address,
            message: input.message,
            cityDistrict: location.city_district,
            postcode: location.postcode,
            state: location.state,
          })
          .then((data) => {
            if (data.data.errorcode === 0) {
              setIsLoading(true);
              localStorage.setItem("userData", JSON.stringify(data.data.data));
              axios.post(
                `${BASEURL}api/dgf/revolution-client-enquiry/get-user-detail`,
                { userId: data.data.data._id }
              );

              props.router.push(
                `/online-growth-revolution/checkout/${data.data.data._id}`
              );
            } else if (data.data.errorcode === 2) {
              toast.warn(`${data.data.errorcode}`, {
                position: "bottom-center",
                autoClose: 5000,
                hideProgressBar: false,
                closeOnClick: true,
                pauseOnHover: true,
                draggable: true,
                progress: undefined,
                theme: "dark",
              });
            }
          });

        // console.log("category :", categoryName)
        // console.log("name :", name)
        // console.log("business name :", input.businessName)
        // console.log("number :", number)
        // console.log("email :", email)
        // console.log("country :", country)
        // console.log("address :", address)
        // console.log("city_district :", location.city_district)
        // console.log("postcode :", location.postcode)
        // console.log("state :", location.state)
        // console.log("message :", input.message)
      }
    } catch (error) {
      toast.warn("Please fill all Feilds", {
        position: "bottom-center",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "dark",
      });
      console.log(error);
    }
  };

  return (
    <Modal
      {...props}
      size="xl"
      aria-labelledby="contained-modal-title-vcenter"
      centered
      className="ogrEnquiryModal"
    >
      <Modal.Body>
        <div className={styles.formBox}>
          <div className={styles.closeBtn}>
            <button onClick={props.onHide}>
              <FontAwesomeIcon icon={faClose} />
            </button>
          </div>

          <Form>
            <div className="row">
              <div className="col-xl-6 col-lg-6 col-md-6 col-sm-12 col-12">
                <Form.Select
                  aria-label="Default select example "
                  name="categoryName"
                  id="categoryName"
                  value={categoryName}
                  onChange={(e) => setCategoryName(e.target.value)}
                  className={
                    !categoryName && errors.categoryName ? "error" : ""
                  }
                // required
                >
                  <option>Industry</option>
                  {category.map((curElt, index) => {
                    return (
                      <>
                        <option value={curElt.name} key={index}>
                          {curElt.name}
                        </option>
                      </>
                    );
                  })}
                  <option value="Other">Other</option>
                </Form.Select>
                {!categoryName && errors.categoryName && (
                  <div className="error-message">{errors.categoryName}</div>
                )}
              </div>
              <div className="col-xl-6 col-lg-6 col-md-6 col-sm-12 col-12">
                <Form.Group>
                  <Form.Control
                    type="text"
                    placeholder="Your Name"
                    name="name"
                    id="name"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    className={!name && errors.name ? "error" : ""}
                  // required
                  />
                </Form.Group>

                {!name && errors.name && (
                  <div className="error-message">{errors.name}</div>
                )}
              </div>

              <div className="col-xl-6 col-lg-6 col-md-6 col-sm-12 col-12">
                <Form.Group>
                  <Form.Control
                    type="text"
                    placeholder="Business Name (optional)"
                    name="businessName"
                    id="businessName"
                    value={input.businessName}
                    onChange={handleChange}
                  />
                </Form.Group>
              </div>
              <div className="col-xl-6 col-lg-6 col-md-6 col-sm-12 col-12">
                <Form.Group>
                  <Form.Control
                    type="text"
                    placeholder="GSTIN (optional)"
                    name="gst"
                    id="gst"
                    value={input.gst}
                    onChange={handleChange}
                  />
                </Form.Group>
              </div>

              <div className="col-xl-6 col-lg-6 col-md-6 col-sm-12 col-12">
                <Form.Group>
                  <Form.Control
                    type="email"
                    placeholder="Your Email"
                    name="email"
                    id="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$"
                    className={!email && errors.email ? "error" : ""}
                  // required
                  />
                  {!email && errors.email && (
                    <div className="error-message">{errors.email}</div>
                  )}
                </Form.Group>
              </div>
              <div className="col-xl-6 col-lg-6 col-md-6 col-sm-12 col-12">
                <Form.Group>
                  <Form.Control
                    type="number"
                    placeholder="Contact/Whatsapp Number"
                    name="number"
                    id="number"
                    minLength={10}
                    value={number}
                    onChange={(e) => setNumber(e.target.value)}
                    minlength="10"
                    maxlength="10"
                    className={!number && errors.number ? "error" : ""}
                  // required
                  />
                </Form.Group>

                {!number && errors.number && (
                  <div className="error-message">{errors.number}</div>
                )}
              </div>

              <div className="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">
                <Form.Select
                  aria-label="Default select example"
                  name="country"
                  id="country"
                  value={country}
                  onChange={(e) => setCountry(e.target.value)}
                  className={!country && errors.country ? "error" : ""}
                // required
                >
                  {countryList &&
                    countryList?.map((curElt, index) => {
                      return (
                        <>
                          <option
                            key={index}
                            selected={curElt.name === "India"}
                            value={curElt.name}
                          >
                            {curElt.name}
                          </option>
                        </>
                      );
                    })}
                </Form.Select>

                {!country && errors.country && (
                  <div className="error-message">{errors.country}</div>
                )}
              </div>

              <div className="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">
                <Form.Group>
                  <Form.Control
                    type="text"
                    placeholder="Address"
                    name="address"
                    id="address"
                    value={address}
                    onChange={(e) => setAddress(e.target.value)}
                    className={!address && errors.address ? "error" : ""}
                  // required
                  />
                </Form.Group>

                {!address && errors.address && (
                  <div className="error-message">{errors.address}</div>
                )}
              </div>
              <div className="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">
                <Form.Group>
                  <Form.Control
                    as="textarea"
                    rows={6}
                    placeholder="Short description about your business"
                    name="message"
                    id="message"
                    value={input.message}
                    onChange={handleChange}
                  />
                </Form.Group>
              </div>
            </div>
            <div className={styles.submitBtn}>
              {isLoading ? (
                <>
                  <div className={styles.loadingButton}>
                    <button>
                      <Spinner
                        as="span"
                        animation="border"
                        size="sm"
                        role="status"
                        aria-hidden="true"
                      />
                      <span>Loading...</span>
                    </button>
                  </div>
                </>
              ) : (
                <button type="button" onClick={handleSubmit}>
                  Next
                </button>
              )}
            </div>
          </Form>
        </div>
      </Modal.Body>
    </Modal>
  );
}
